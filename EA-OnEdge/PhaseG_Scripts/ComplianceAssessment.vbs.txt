Option Explicit

!INC Local Scripts.EAConstants-VBScript

Sub CreatePhaseGComplianceAssessmentDiagram()

    Repository.EnsureOutputVisible "Script"
    Session.Output "VBScript CREATE PHASE G COMPLIANCE ASSESSMENT DIAGRAM"
    Session.Output "==============================================="

    Dim i, tempModel

    ' Find root model "Model"
    Dim rootModel As EA.Package
    Set rootModel = Nothing
    For i = 0 To Repository.Models.Count - 1
        Set tempModel = Repository.Models.GetAt(i)
        If tempModel.Name = "Model" Then
            Set rootModel = tempModel
            Exit For
        End If
    Next
    If rootModel Is Nothing Then
        Session.Output "Error: Root model 'Model' not found."
        Exit Sub
    End If

    ' Find "Architecture Development Method"
    Dim admPackage As EA.Package
    Set admPackage = findPackageByName(rootModel, "Architecture Development Method")
    If admPackage Is Nothing Then
        Session.Output "Error: Architecture Development Method package not found."
        Exit Sub
    End If

    ' Find or create Phase G package
    Dim phaseGPackage As EA.Package
    Set phaseGPackage = findPackageByName(admPackage, "Phase G")
    If phaseGPackage Is Nothing Then
        Set phaseGPackage = admPackage.Packages.AddNew("Phase G", "Package")
        phaseGPackage.Update
    End If

    ' Check/Create Compliance Assessment Diagram
    Dim compDiagram As EA.Diagram
    Set compDiagram = Nothing
    For i = 0 To phaseGPackage.Diagrams.Count - 1
        Dim diag As EA.Diagram
        Set diag = phaseGPackage.Diagrams.GetAt(i)
        If diag.Name = "Compliance Assessment Diagram" Then
            Set compDiagram = diag
            Exit For
        End If
    Next
    If compDiagram Is Nothing Then
        Set compDiagram = phaseGPackage.Diagrams.AddNew("Compliance Assessment Diagram", "Custom")
        compDiagram.Notes = "Phase G: Compliance checkpoints, conformance reporting, and escalation."
        compDiagram.Update
    End If

    ' Define compliance assessment elements
    Dim elements(4), stereotypes(4), types(4), colors(4), sizes(4), notes(4), objs(4)
    elements(0) = "Conformance Assessment": stereotypes(0) = "Checkpoint": types(0) = "Class": colors(0) = RGB(255,192,0): sizes(0) = "l=100;r=350;t=90;b=40": notes(0) = "Regular assessment of implementation against architecture."
    elements(1) = "Implementation Team": stereotypes(1) = "Team": types(1) = "Actor": colors(1) = RGB(68,114,196): sizes(1) = "l=80;r=220;t=200;b=150": notes(1) = "Executes project as designed."
    elements(2) = "Non-Compliance Detected": stereotypes(2) = "Issue": types(2) = "Issue": colors(2) = RGB(255,0,0): sizes(2) = "l=370;r=540;t=200;b=150": notes(2) = "Variance or gap with the approved architecture."
    elements(3) = "Get-Well Recommendation": stereotypes(3) = "Action": types(3) = "Requirement": colors(3) = RGB(112,173,71): sizes(3) = "l=225;r=425;t=300;b=250": notes(3) = "Action/fix to restore conformance."
    Dim elementCount: elementCount = 4

    For i = 0 To elementCount - 1
        Dim elem As EA.Element
        Set elem = phaseGPackage.Elements.AddNew(elements(i), types(i))
        elem.Stereotype = stereotypes(i)
        elem.Notes = notes(i)
        elem.Update
        Set objs(i) = elem
    Next

    Dim diagObjects As EA.Collection
    Set diagObjects = compDiagram.DiagramObjects
    For i = 0 To elementCount - 1
        Dim diagObj As EA.DiagramObject
        Set diagObj = diagObjects.AddNew(sizes(i) & ";", "")
        diagObj.ElementID = objs(i).ElementID
        diagObj.BackgroundColor = colors(i)
        diagObj.Update
    Next

    Dim connectors As EA.Collection
    Set connectors = phaseGPackage.Connectors
    Dim conn As EA.Connector

    ' Assessment flows
    Set conn = connectors.AddNew("", "Association")
    conn.SupplierID = objs(1).ElementID: conn.ClientID = objs(0).ElementID
    conn.Name = "Regular Report": conn.Update

    Set conn = connectors.AddNew("", "Association")
    conn.SupplierID = objs(0).ElementID: conn.ClientID = objs(2).ElementID
    conn.Name = "Non-Conformance": conn.Update

    Set conn = connectors.AddNew("", "Association")
    conn.SupplierID = objs(2).ElementID: conn.ClientID = objs(3).ElementID
    conn.Name = "Get-Well Recommendation": conn.Update

    Set conn = connectors.AddNew("", "Association")
    conn.SupplierID = objs(3).ElementID: conn.ClientID = objs(1).ElementID
    conn.Name = "Feedback/Corrective Action": conn.Update

    Repository.RefreshModelView phaseGPackage.PackageID
    compDiagram.Update
    Repository.ReloadDiagram compDiagram.DiagramID

    Session.Output "Compliance Assessment Diagram created successfully under MODEL > Architecture Development Method > Phase G"
    Session.Output "Done!"

End Sub

' Recursive function to find a package by name
Function findPackageByName(parentPackage, targetName)
    Dim i, pkg, found
    Set findPackageByName = Nothing
    For i = 0 To parentPackage.Packages.Count - 1
        Set pkg = parentPackage.Packages.GetAt(i)
        If pkg.Name = targetName Then
            Set findPackageByName = pkg
            Exit Function
        End If
        Set found = findPackageByName(pkg, targetName)
        If Not found Is Nothing Then
            Set findPackageByName = found
            Exit Function
        End If
    Next
End Function

CreatePhaseGComplianceAssessmentDiagram
