Option Explicit

!INC Local Scripts.EAConstants-VBScript

' Main function to create the Phase E Project Context Diagram

Sub CreatePhaseEProjectContextDiagram()

    Repository.EnsureOutputVisible "Script"
    Session.Output "VBScript CREATE PHASE E PROJECT CONTEXT DIAGRAM"
    Session.Output "==============================================="

    Dim hasError
    hasError = False

    ' Find root model "Model"
    Dim rootModel As EA.Package
    Set rootModel = Nothing

    Dim i, tempModel
    For i = 0 To Repository.Models.Count - 1
        Set tempModel = Repository.Models.GetAt(i)
        If tempModel.Name = "Model" Then
            Set rootModel = tempModel
            Exit For
        End If
    Next

    If rootModel Is Nothing Then
        Session.Output "Error: Root model 'Model' not found. Listing available models:"
        For i = 0 To Repository.Models.Count - 1
            Set tempModel = Repository.Models.GetAt(i)
            Session.Output "Model " & i & ": " & tempModel.Name
        Next
        hasError = True
        Exit Sub
    End If
    Session.Output "Root model found: " & rootModel.Name

    ' Find the "Architecture Development Method" package
    Dim admPackage As EA.Package
    Set admPackage = findPackageByName(rootModel, "Architecture Development Method")
    If admPackage Is Nothing Then
        Session.Output "Error: Architecture Development Method package not found. Listing available packages:"
        listAllPackages rootModel, 0
        hasError = True
        Exit Sub
    End If
    Session.Output "Found package: " & admPackage.Name

    ' Find or create the "Phase E" package
    Dim phaseEPackage As EA.Package
    Set phaseEPackage = findPackageByName(admPackage, "Phase E")
    If phaseEPackage Is Nothing Then
        Set phaseEPackage = admPackage.Packages.AddNew("Phase E", "Package")
        phaseEPackage.Update
        Session.Output "Created package: Phase E"
    End If
    Session.Output "Using package: " & phaseEPackage.Name

    ' Check for existing Project Context Diagram
    Dim projCtxDiagram As EA.Diagram
    Set projCtxDiagram = Nothing
    For i = 0 To phaseEPackage.Diagrams.Count - 1
        Dim diag As EA.Diagram
        Set diag = phaseEPackage.Diagrams.GetAt(i)
        If diag.Name = "Project Context Diagram" Then
            Set projCtxDiagram = diag
            Exit For
        End If
    Next

    If projCtxDiagram Is Nothing Then
        Set projCtxDiagram = phaseEPackage.Diagrams.AddNew("Project Context Diagram", "Component")
        If Not projCtxDiagram Is Nothing Then
            projCtxDiagram.Notes = "Project Context: Strategic drivers, stakeholder concerns, identified opportunities, and solution building blocks for the AI Superintelligence Delivery Factory."
            projCtxDiagram.Update
            Session.Output "Created diagram: Project Context Diagram"
        Else
            Session.Output "Error: Failed to create Project Context Diagram."
            Exit Sub
        End If
    Else
        Session.Output "Diagram already exists: Project Context Diagram"
    End If

    ' Define elements from Opportunities document
    Dim elements(10), stereotypes(10), elementTypes(10), elementObjects(10), elementColors(10), elementSizes(10), notes(10)
    Dim elementCount
    elementCount = 0

    ' Strategic Business Drivers (Yellow)
    elements(0) = "Market Differentiation": stereotypes(0) = "Driver": elementTypes(0) = "Requirement": elementColors(0) = RGB(255, 192, 0): elementSizes(0) = "l=50;r=230;t=60;b=10": notes(0) = "Delivering cutting-edge AI with micro-factory automation."
    elementCount = elementCount + 1
    elements(1) = "Cost Optimization": stereotypes(1) = "Driver": elementTypes(1) = "Requirement": elementColors(1) = RGB(255, 192, 0): elementSizes(1) = "l=50;r=230;t=120;b=70": notes(1) = "Automation & decentralization lower OpEx and improve ROI."
    elementCount = elementCount + 1
    elements(2) = "Flexibility and Scalability": stereotypes(2) = "Driver": elementTypes(2) = "Requirement": elementColors(2) = RGB(255, 192, 0): elementSizes(2) = "l=50;r=230;t=180;b=130": notes(2) = "Platform adapts to new markets rapidly."
    elementCount = elementCount + 1

    ' Stakeholder Concerns (Blue)
    elements(3) = "Enterprise Customers": stereotypes(3) = "Stakeholder": elementTypes(3) = "Actor": elementColors(3) = RGB(91, 155, 213): elementSizes(3) = "l=260;r=410;t=30;b=-10": notes(3) = "Need robust, high-availability, integrated AI across domains."
    elementCount = elementCount + 1
    elements(4) = "Operations & IT": stereotypes(4) = "Stakeholder": elementTypes(4) = "Actor": elementColors(4) = RGB(91, 155, 213): elementSizes(4) = "l=260;r=410;t=90;b=40": notes(4) = "Demand automated, resilient, easy-to-manage remote systems."
    elementCount = elementCount + 1
    elements(5) = "Investors": stereotypes(5) = "Stakeholder": elementTypes(5) = "Actor": elementColors(5) = RGB(91, 155, 213): elementSizes(5) = "l=260;r=410;t=150;b=100": notes(5) = "Want scalability, efficiency, & clear market edge."
    elementCount = elementCount + 1
    elements(6) = "Regulatory Bodies": stereotypes(6) = "Stakeholder": elementTypes(6) = "Actor": elementColors(6) = RGB(91, 155, 213): elementSizes(6) = "l=260;r=410;t=210;b=160": notes(6) = "Care about energy efficiency, data security, local compliance."
    elementCount = elementCount + 1

    ' Key Opportunities/Technologies (Green)
    elements(7) = "Autonomous Micro Data Centers": stereotypes(7) = "Opportunity": elementTypes(7) = "Component": elementColors(7) = RGB(112, 173, 71): elementSizes(7) = "l=430;r=690;t=60;b=10": notes(7) = "Containerized, self-powered, self-cooled remote facilities."
    elementCount = elementCount + 1
    elements(8) = "Satellite Connectivity": stereotypes(8) = "Opportunity": elementTypes(8) = "Component": elementColors(8) = RGB(112, 173, 71): elementSizes(8) = "l=720;r=960;t=60;b=10": notes(8) = "Resilient, global broadband for all centers."
    elementCount = elementCount + 1
    elements(9) = "Robotic & Automated Operations": stereotypes(9) = "Opportunity": elementTypes(9) = "Component": elementColors(9) = RGB(112, 173, 71): elementSizes(9) = "l=430;r=690;t=150;b=100": notes(9) = "Automated maintenance, predictive diagnostics."
    elementCount = elementCount + 1

    ' Solution (Orange)
    elements(10) = "AI Superintelligence Delivery Factory": stereotypes(10) = "Solution": elementTypes(10) = "Component": elementColors(10) = RGB(237, 125, 49): elementSizes(10) = "l=700;r=1050;t=180;b=130": notes(10) = "Decentralized architecture integrating business, IS, and technology for global enterprise AI."
    elementCount = elementCount + 1

    ' Create elements in the package (clean duplicate names if script is rerun)
    Dim elem As EA.Element
    Dim elementObjectsMap
    Set elementObjectsMap = CreateObject("Scripting.Dictionary")
    For i = 0 To elementCount - 1
        Set elem = phaseEPackage.Elements.AddNew(elements(i), elementTypes(i))
        elem.Stereotype = stereotypes(i)
        elem.Notes = notes(i)
        elem.Update
        Set elementObjects(i) = elem
        elementObjectsMap.Add elements(i), elem
        Session.Output "Created element: " & elements(i)
    Next

    ' Add elements to the diagram with positions and colors
    Dim diagObjects As EA.Collection
    Set diagObjects = projCtxDiagram.DiagramObjects

    For i = 0 To elementCount - 1
        Dim diagObj As EA.DiagramObject
        Set diagObj = diagObjects.AddNew(elementSizes(i) & ";", "")
        diagObj.ElementID = elementObjects(i).ElementID
        diagObj.BackgroundColor = elementColors(i)
        diagObj.Update
    Next

    ' Create associations showing context (NO DiagramLinks.AddNew is used)
    Dim connectors As EA.Collection
    Set connectors = phaseEPackage.Connectors
    Dim conn As EA.Connector

    ' Strategic drivers -> Solution
    For i = 0 To 2 ' Market Differentiation, Cost Optimization, Flexibility
        Set conn = connectors.AddNew("", "Association")
        conn.SupplierID = elementObjects(i).ElementID
        conn.ClientID = elementObjects(10).ElementID
        conn.Name = "drives"
        conn.Update
        Session.Output "Created driver link: " & elements(i) & " -> AI Superintelligence Delivery Factory"
    Next
    ' Stakeholders -> Solution (require/regulate)
    For i = 3 To 6
        Set conn = connectors.AddNew("", "Association")
        conn.SupplierID = elementObjects(i).ElementID
        conn.ClientID = elementObjects(10).ElementID
        If elements(i) = "Regulatory Bodies" Then
            conn.Name = "regulates"
        Else
            conn.Name = "requires"
        End If
        conn.Update
        Session.Output "Created stakeholder link: " & elements(i) & " -> AI Superintelligence Delivery Factory"
    Next
    ' Opportunities -> Solution (enables)
    For i = 7 To 9
        Set conn = connectors.AddNew("", "Association")
        conn.SupplierID = elementObjects(i).ElementID
        conn.ClientID = elementObjects(10).ElementID
        conn.Name = "enables"
        conn.Update
        Session.Output "Created opportunity link: " & elements(i) & " -> AI Superintelligence Delivery Factory"
    Next

    ' Update and reload diagram
    Repository.RefreshModelView phaseEPackage.PackageID
    projCtxDiagram.Update
    Repository.ReloadDiagram projCtxDiagram.DiagramID

    Session.Output "Project Context Diagram created successfully under MODEL > Architecture Development Method > Phase E"
    Session.Output "Done!"

End Sub

' Recursive function to find a package by name
Function findPackageByName(parentPackage, targetName)
    Dim i, pkg, found
    Set findPackageByName = Nothing
    For i = 0 To parentPackage.Packages.Count - 1
        Set pkg = parentPackage.Packages.GetAt(i)
        If pkg.Name = targetName Then
            Set findPackageByName = pkg
            Exit Function
        End If
        Set found = findPackageByName(pkg, targetName)
        If Not found Is Nothing Then
            Set findPackageByName = found
            Exit Function
        End If
    Next
End Function

' For debugging: list all packages recursively
Sub listAllPackages(parentPackage, level)
    Dim i, pkg
    For i = 0 To parentPackage.Packages.Count - 1
        Set pkg = parentPackage.Packages.GetAt(i)
        Session.Output String(level * 2, " ") & "Package " & i & ": " & pkg.Name
        listAllPackages pkg, level + 1
    Next
End Sub

' Execute the main function
CreatePhaseEProjectContextDiagram
